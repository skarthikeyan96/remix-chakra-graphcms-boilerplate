{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/context.tsx", "../app/createEmotionCache.ts", "/Users/karthikeyan.shanmuga/.karthikeyan/remix-chakra-vercel/app/root.tsx", "/Users/karthikeyan.shanmuga/.karthikeyan/remix-chakra-vercel/app/routes/index.tsx", "../app/components/card.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "// entry.server.tsx\nimport { renderToString } from 'react-dom/server'\nimport { CacheProvider } from '@emotion/react'\nimport createEmotionServer from '@emotion/server/create-instance'\nimport { RemixServer } from '@remix-run/react'\nimport type { EntryContext } from '@remix-run/node' // Depends on the runtime you choose\n\nimport { ServerStyleContext } from './context'\nimport createEmotionCache from './createEmotionCache'\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  const cache = createEmotionCache()\n  const { extractCriticalToChunks } = createEmotionServer(cache)\n\n  const html = renderToString(\n    <ServerStyleContext.Provider value={null}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  )\n\n  const chunks = extractCriticalToChunks(html)\n\n  const markup = renderToString(\n    <ServerStyleContext.Provider value={chunks.styles}>\n      <CacheProvider value={cache}>\n        <RemixServer context={remixContext} url={request.url} />\n      </CacheProvider>\n    </ServerStyleContext.Provider>,\n  )\n\n  responseHeaders.set('Content-Type', 'text/html')\n\n  return new Response(`<!DOCTYPE html>${markup}`, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  })\n}", "// context.tsx\nimport React, { createContext } from 'react'\n\nexport interface ServerStyleContextData {\n  key: string\n  ids: Array<string>\n  css: string\n}\n\nexport const ServerStyleContext = createContext<ServerStyleContextData[] | null>(null)\n\nexport interface ClientStyleContextData {\n  reset: () => void\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(null)", "// createEmotionCache.ts\nimport createCache from '@emotion/cache'\n\nexport default function createEmotionCache() {\n  return createCache({ key: 'css' })\n}", "// root.tsx\nimport React, { useContext, useEffect } from 'react'\nimport { withEmotionCache } from '@emotion/react'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react'\nimport { MetaFunction, LinksFunction } from '@remix-run/node' // Depends on the runtime you choose\n\nimport { ServerStyleContext, ClientStyleContext } from './context'\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\nexport let links: LinksFunction = () => {\n  return [\n    { rel: 'preconnect', href: 'https://fonts.googleapis.com' },\n    { rel: 'preconnect', href: 'https://fonts.gstaticom' },\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap'\n    },\n  ]\n}\n\nexport default function App() {\n  return (\n    <Document>\n      <ChakraProvider>\n        <Outlet />\n      </ChakraProvider>\n    </Document>\n  )\n}\n\ninterface DocumentProps {\n  children: React.ReactNode;\n}\n\nconst Document = withEmotionCache(\n  ({ children }: DocumentProps, emotionCache) => {\n    const serverStyleData = useContext(ServerStyleContext);\n    const clientStyleData = useContext(ClientStyleContext);\n\n    // Only executed on client\n    useEffect(() => {\n      // re-link sheet container\n      emotionCache.sheet.container = document.head;\n      // re-inject tags\n      const tags = emotionCache.sheet.tags;\n      emotionCache.sheet.flush();\n      tags.forEach((tag) => {\n        (emotionCache.sheet as any)._insertTag(tag);\n      });\n      // reset cache to reapply global styles\n      clientStyleData?.reset();\n    }, []);\n\n    return (\n      <html lang=\"en\">\n        <head>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({ key, ids, css }) => (\n            <style\n              key={key}\n              data-emotion={`${key} ${ids.join(' ')}`}\n              dangerouslySetInnerHTML={{ __html: css }}\n            />\n          ))}\n        </head>\n        <body>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>\n    );\n  }\n);", "import { Box, Container, Text, Image, LinkBox, LinkOverlay, Heading } from \"@chakra-ui/react\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { gql, GraphQLClient } from \"graphql-request\";\nimport Card from \"~/components/card\";\n\nconst GetProductsQuery = gql`\n  {\n    products {\n      id\n      name\n      image {\n        url\n      }\n    }\n  }\n`;\n\nexport const loader = async () => {\n  const graphcms = new GraphQLClient(\n    \"https://api-us-east-1.graphcms.com/v2/cl2vbpzo612jp01ywe3jqcfft/master\",{\n      headers:{\n        Authorization: `Bearer ${process.env.REMIX_GRAPHCMS_CONTENT_API_KEY}`\n      }\n    }\n  );\n\n  const { products } = await graphcms.request(GetProductsQuery);\n  return json({ products });\n};\n\nexport default function Index() {\n  let data = useLoaderData();\n  console.log(data);\n\n  return (\n    <Box m={3}>\n      <Container>\n        <Heading textAlign=\"center\" paddingBottom={4} paddingTop={4} fontSize={\"lg\"}> Chakra + Remix + GraphCMS Boilerplate</Heading>\n        {data.products.map((product: { name: string, image: {url: string} }) => {\n          return (\n            <Card image={product.image.url} heading={product.name}/>\n          );\n        })}\n      </Container>\n    </Box>\n  );\n}\n", "import {\n    Center,\n    Flex,\n    Heading,\n    Image,\n    Stack,\n    useColorModeValue,\n  } from '@chakra-ui/react';\n  \n  export default function Card(props: {image: string, heading: string}) {\n    return (\n      <Center py={6}>\n        <Stack\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          direction={{ base: 'column', md: 'row' }}\n          boxShadow={'2xl'}\n          padding={4}>\n          <Flex flex={1} bg=\"green.200\">\n            <Image\n              objectFit=\"cover\"\n              boxSize=\"100%\"\n              src={\n                props.image\n              }\n            />\n          </Flex>\n          <Stack\n            flex={1}\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            p={1}\n            pt={2}>\n            <Heading fontSize={'xl'} fontFamily={'body'} textAlign=\"center\">\n             {props.heading}\n            </Heading>\n          </Stack>\n        </Stack>\n      </Center>\n    );\n  }", "export default {'version':'2d70bcef','entry':{'module':'/build/entry.client-RRCTV3IU.js','imports':['/build/_shared/chunk-OJ3HM46L.js','/build/_shared/chunk-EPY4P33A.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-2ZPK5A7M.js','imports':['/build/_shared/chunk-LKYY26UJ.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-MWX43XRD.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-2D70BCEF.js'};", "\nimport * as entryServer from \"/Users/karthikeyan.shanmuga/.karthikeyan/remix-chakra-vercel/app/entry.server.tsx\";\nimport * as route0 from \"/Users/karthikeyan.shanmuga/.karthikeyan/remix-chakra-vercel/app/root.tsx\";\nimport * as route1 from \"/Users/karthikeyan.shanmuga/.karthikeyan/remix-chakra-vercel/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": "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",
  "names": []
}
